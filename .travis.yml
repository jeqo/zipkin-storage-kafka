# See https://docs.travis-ci.com/user/reference/overview/#for-a-particular-travisyml-configuration
arch: amd64 # Not arm64 for multi-platform Docker builds (qemu is amd64->arm64, not vice versa)
os: linux   # required for arch different than amd64
dist: focal # newest available distribution
language: java # Re-use JDK 11 from focal release instead of delaying build with installation
services: docker

# license-maven-plugin needs the full history to generate copyright year range. Ex. 2013-2020
# Don't do a shallow clone, as it interferes with this.
git:
  depth: false

cache:
  directories:
    - $HOME/.m2

# Prevent test build of a documentation-only change.
#
# if: conditions are preferred as they obviate job creation. However, they can only use
# pre-defined env variables or globals that can be evaluated statically. The other way to skip
# is to exit early. We do that here to prevent overhead of running tests that only include Markdown
# (documentation) updates.
_terminate_if_only_docs: &terminate_if_only_docs |
  if [ -n "${TRAVIS_COMMIT_RANGE}" ] && ! git diff --name-only "${TRAVIS_COMMIT_RANGE}" -- | grep -qv '\.md$'; then
    echo "Stopping job as changes only affect documentation (ex. README.md)"
    travis_terminate 0
  fi

jobs:
  include:
    - stage: test
      # We run tests on non-tagged pushes to master that aren't a commit made by the release plugin
      # We also run tests on pull requests targeted at the master branch.
      if: branch = master AND tag IS blank AND commit_message !~ maven-release-plugin AND type IN (push, pull_request)
      name: Run unit and integration tests
      before_install: *terminate_if_only_docs
      # To save time and build credits, we continue to deploy after a secure commit to master.
      # See https://docs-staging.travis-ci.com/user/environment-variables/#convenience-variables
      install: |
        if [ "${TRAVIS_SECURE_ENV_VARS}" = "true" ] && [ "${TRAVIS_PULL_REQUEST}" = "false" ]; then
          export SHOULD_DEPLOY=true
          ./build-bin/configure_deploy
        else
          export SHOULD_DEPLOY=false
          ./build-bin/configure_test
        fi
      script:
        # Run unit and integration tests
        - ./build-bin/test || travis_terminate 1
        - if [ "${SHOULD_DEPLOY}" != "true" ]; then travis_terminate 0; fi
        # Deploy a SNAPSHOT version
        - |
          export POM_VERSION=$(./mvnw help:evaluate -N -Dexpression=project.version -q -DforceStdout)
          # travis_wait ensures long pauses during uploads aren't mistaken for a hung job
          travis_wait ./build-bin/deploy ${POM_VERSION}
    - stage: deploy
      if: tag =~ /^[0-9]+\.[0-9]+\.[0-9]+$/ AND type = push AND env(GH_TOKEN) IS present
      name: Deploy a release
      # verify the version tag is coherent
      before_install: |
        export POM_VERSION=$(./mvnw help:evaluate -N -Dexpression=project.version -q -DforceStdout)
        if [ "${POM_VERSION}" != "${TRAVIS_TAG}" ]; then
          echo "Invalid version. Git tag ${TRAVIS_TAG} should have project.version ${POM_VERSION}"
          exit 1
        else
      install: ./build-bin/configure_deploy
      # travis_wait ensures long pauses during uploads aren't mistaken for a hung job
      script: travis_wait ./build-bin/deploy ${POM_VERSION}
    # Create a release version when a release trigger and in a secure ENV
    - stage: create release
      if: tag =~ /^release-[0-9]+\.[0-9]+\.[0-9]+$/ AND  type = push AND env(GH_TOKEN) IS present
      name: "Create release version"
      install: ./build-bin/git/login_git
      script:
        # Delete the trigger tag
        - git push origin :"${TRAVIS_TAG}"
        # Get the release version
        - release_version=$(echo "${TRAVIS_TAG}" | sed 's/^release-//') || travis_terminate 1
        # Create the release tag
        - ./build-bin/maven/maven_prepare_release ${release_version}
    - stage: push docker
      if: tag =~ /^docker-[0-9]+\.[0-9]+\.[0-9]+$/ AND type = push AND env(GH_TOKEN) IS present
      name: Re-push all Docker images
      install:
        - ./build-bin/git/login_git
        - ./build-bin/docker/configure_docker_push
      script:
        # Delete the trigger tag
        - git push origin :"${TRAVIS_TAG}"
        # Get the release version
        - release_version=$(echo "${TRAVIS_TAG}" | sed 's/^docker-//') || travis_terminate 1
        # Push the docker images
        - docker/bin/docker_push ${release_version}

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/ead3c37d57527214e9f2
      - https://webhooks.gitter.im/e/9f1ee2f315d32956f8d6
    on_success: change
    on_failure: always

# Secure variables needed for release and publication
#
# When Travis, add to https://travis-ci.com/github/openzipkin/${REPO}/settings
#
# GH_TOKEN=XXX-https://github.com/settings/tokens-XXX
#   - makes release commits and tags, also writes to GHCR if Docker
#   - needs repo:status, public_repo and if Docker write:packages, delete:packages
#   - referenced in .settings.xml
#   - store like this: echo "https://$GH_TOKEN:@github.com" > .git/credentials
# GH_USER=user_that_created_GH_TOKEN
#   - login like this: echo "$GH_TOKEN"| docker login ghcr.io -u "$GH_USER" --password-stdin
# GPG_SIGNING_KEY=$(gpg -a --export-secret-keys zipkin-admin@googlegroups.com |base64)
#   - used to sign jars in release commands
#   - sent to keyserver.ubuntu.com
#   - import like this: echo ${GPG_SIGNING_KEY} | base64 --decode | gpg --batch --passphrase ${GPG_PASSPHRASE} --import
# GPG_PASSPHRASE=passphrase_for_GPG_SIGNING_KEY
#   - referenced in .settings.xml
# SONATYPE_USER=your_sonatype_account_token
#   - used to publish to Maven Central via https://oss.sonatype.org/#stagingRepositories
#   - needs access to io.zipkin via https://issues.sonatype.org/browse/OSSRH-16669
#   - generate via https://oss.sonatype.org/#profile;User%20Token
#   - referenced in .settings.xml
# SONATYPE_PASSWORD=password_to_SONATYPE_USER
#   - referenced in .settings.xml
# DOCKERHUB_USER=typically_dockerzipkindeployer
#   - only push top-level projects: zipkin zipkin-aws zipkin-dependencies zipkin-gcp to Docker Hub, only on release
#   - login like this: echo "$DOCKERHUB_TOKEN"| docker login -u "$DOCKERHUB_USER" --password-stdin
# DOCKERHUB_TOKEN=access_token_for_DOCKERHUB_USER
#   -  Access Token from here https://hub.docker.com/settings/security
