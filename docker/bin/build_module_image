#!/bin/sh
#
# Copyright 2019-2020 The OpenZipkin Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
#

set -ue

if ! test -f docker/Dockerfile; then
  echo Please execute this script from the repository root
  exit 1
fi

if ! test -f module/pom.xml; then
  echo This should be a single-module project
  exit 1
fi

export POM_VERSION=${POM_VERSION:-$(mvn help:evaluate -N -Dexpression=project.version -q -DforceStdout)} || exit 1
ARTIFACT_ID=$(mvn help:evaluate -N -Dexpression=project.artifactId -q -DforceStdout -f module/pom.xml) || exit 1
GROUP_ID=$(mvn help:evaluate -N -Dexpression=project.groupId -q -DforceStdout) || exit 1

DOCKER_TAG=${1}
RELEASE_VERSION=${2:-${POM_VERSION}}
OP=${3:-load}

# When true use module produced by a Maven build.
# This is implicitly true when a SNAPSHOT version.
RELEASE_FROM_MAVEN_BUILD=${RELEASE_FROM_MAVEN_BUILD:-false}

# Only runs maven commands: we use one version to keep the layer count manageable and centralized.
JAVA_VERSION=${JAVA_VERSION:-15.0.1_p9}
ZIPKIN_VERSION=${ZIPKIN_VERSION:-$(mvn help:evaluate -N -Dexpression=zipkin.version -q -DforceStdout)} || exit 1

# Platforms to eventually push to the registry
PLATFORMS="linux/amd64,linux/arm64"
DOCKERFILE_PATH=docker/Dockerfile

# We don't currently release from a remote snapshot repository. When the version is snapshot, this
# is a local build or a pull request. Look to see if the files the build would produce are present.
# This allows skipping the build when an upstream step or stage has already produced them.
case "${RELEASE_VERSION}" in
  *-SNAPSHOT )
    if [ -f "module/target/${ARTIFACT_ID}-${RELEASE_VERSION}-module.jar" ]; then
      echo Re-using ${ARTIFACT_ID} ${RELEASE_VERSION} binaries from a previous build...
    elif [ ${RELEASE_FROM_MAVEN_BUILD} = true ]; then
      echo "RELEASE_FROM_MAVEN_BUILD=true, but required binaries are not present"
      exit 1
    else
      if [ ${RELEASE_VERSION} != ${POM_VERSION} ]; then
        echo "To build ${ARTIFACT_ID} implicitly, run: docker/build_image ${DOCKER_TAG} ${POM_VERSION}"
        exit 1
      fi

      echo Building ${ARTIFACT_ID} ${RELEASE_VERSION}...
      # Skips tests and license to run faster and allow shallow clones
      ./mvnw -T1C -q --batch-mode -DskipTests -Dlicense.skip=true package
    fi
    RELEASE_FROM_MAVEN_BUILD=true
    ;;
esac

DOCKER_ARGS="-f ${DOCKERFILE_PATH} --tag ${DOCKER_TAG} \
--build-arg release_version=${RELEASE_VERSION} \
--build-arg group_id=${GROUP_ID} --build-arg artifact_id=${ARTIFACT_ID} \
--build-arg release_from_maven_build=${RELEASE_FROM_MAVEN_BUILD} \
--build-arg java_version=${JAVA_VERSION} --build-arg zipkin_version=${ZIPKIN_VERSION} \
--label org.opencontainers.image.source=${DOCKER_IMAGE_SOURCE} \
--label org.opencontainers.image.version=${RELEASE_VERSION} ."

# Avoid buildx for two reasons:
#  * It only supports one platform/arch on load https://github.com/docker/buildx/issues/59
#  * It would pull Docker Hub for moby/buildkit or multiarch/qemu-user-static images, using up quota
if [ "${OP}" = "load" ]; then
  echo "Building image ${DOCKER_TAG} with zipkin_version ${ZIPKIN_VERSION}"
  docker build --label org.opencontainers.image.description="${DOCKER_IMAGE_DESCRIPTION}" ${DOCKER_ARGS}
  exit $?
fi

if [ "${OP}" != "push" ]; then
  echo "Invalid OP: ${OP}, Ex. load or push"
  exit 1
fi

# This can be less manual in the future, for example checking buildx to see what it can do.
ARCH=${ARCH:-$(uname -m)}
case ${ARCH} in
  x86_64* )
    ;;
  amd64* )
    ;;
  * )
    echo Pushing platforms ${PLATFORMS} with arch ${ARCH} is not yet supported.
    exit 1
esac

echo "Pushing image ${DOCKER_TAG} with platforms ${PLATFORMS} and Zipkin version ${ZIPKIN_VERSION}"
docker buildx build --progress plain --platform=${PLATFORMS} \
  --label org.opencontainers.image.description="${DOCKER_IMAGE_DESCRIPTION}" ${DOCKER_ARGS} --push
